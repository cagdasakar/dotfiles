[user]
	name = Cagdas Akar
	email = cagdas.akar@gmail.com

[core]
    editor = vim
    
    compression = 0
    autocrlf = input
	safecrlf = warn
	eol = lf
	filemode = false

    # Use custom `.gitignore` and `.gitattributes`
	excludesfile = ~/.gitignore
	# attributesfile = ~/.gitattributes

    # Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[pull]  
    default = current
    rebase = false
[push]
    default = current
    # Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[commit]
	# template = /Users/cagdasakar/.stCommitMsg
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[diff]
	# Detect copies as well as renames
	renames = copies
[init]
	defaultBranch = main
    
[color]
    diff = auto
    status = auto
    branch = auto
    interactive = auto
    ui = auto
    pager = true
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    panic = !tar cvf ../git_panic.tar *
    c = commit
    co = checkout
    br = branch
    st = status -sb
    fo = fetch origin
    unstage = reset HEAD --
    
    lg = log --graph --pretty=format:'%Cred%h%Creset (%ad) -%C(yellow)%d%Creset %s %C(yellow)[%an]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=short
    hist = log --graph --pretty=format:'%Cred%h%Creset (%ad) -%C(yellow)%d%Creset %s %C(yellow)[%an]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=short
    histbr = log --all --graph --pretty=format:'%Cred%h%Creset (%ad) -%C(yellow)%d%Creset %s %C(yellow)[%an]%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=short

    # Show last commit
    last = log -1 HEAD;
    
    diff = diff --word-diff
    # Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    #d = !git --no-pager diff
    dt = difftool
    stat = !git --no-pager diff --stat
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # add and commit with message, dont need quotation marks, example:
    # git acm message without quotes
    acm = "!f() { git add . && git commit -m \"$(echo $@)\";}; f";
    acp = "!g() { git add . && git commit -m \"$(echo $@)\" && git push;}; g";

    # Switch to a branch, creating it if necessary
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD

    # Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main
	# a.k.a. ‘delete merged’
	sweep = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d && git remote prune origin"

    # Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
    url = remote -v;

    # List aliases
	aliases = config --get-regexp alias

    # List contributors with number of commits
	contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
	whoami = config user.email

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[difftool "sourcetree"]
	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"